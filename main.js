(()=>{"use strict";var e,r,t,n,o,i,c,a={783:(e,r,t)=>{t(891);class n{constructor(e){"string"==typeof e&&(e=document.querySelector(e)),this._element=e,this._cardArray=this._element.querySelectorAll(".card")}setAllCardDisable(){this._cardArray.forEach((e=>e.classList.add("disabled")))}setAllCardEnable(){this._cardArray.forEach((e=>{e.classList.contains("disabled")&&e.classList.remove("disabled")}))}selCardEnable(e){this._cardArray.forEach((r=>{r.classList.contains(e)||r.classList.add("disabled")}))}}class o{constructor(e){"string"==typeof e&&(e=document.querySelector(e)),this.onBtnCLick=this.onBtnCLick.bind(this),this.onInput=this.onInput.bind(this),this._element=e,this._validBtn=this._element.querySelector(".valid-btn"),this._inputNumber=this._element.querySelector(".valid-number"),this._luhnCheck=this._element.querySelector(".valid-widget-check"),this._validBtn.addEventListener("click",this.onBtnCLick),this._inputNumber.addEventListener("input",this.onInput),this._iconWidget=new n(".card-list")}onBtnCLick(e){e.preventDefault(),this._luhnCheck.classList.remove("checked"),this._luhnCheck.classList.remove("unchecked");const r=this._inputNumber.value;r&&(function(e){if(/[^0-9-\s]+/.test(e))return!1;let r=0,t=!1;for(let n=e.length-1;n>=0;n-=1){let o=parseInt(e.charAt(n),10);t&&(o*=2,o>9&&(o-=9)),r+=o,t=!t}return r%10==0}(r)?this._luhnCheck.classList.add("checked"):this._luhnCheck.classList.add("unchecked"))}checkCard(){if(this._inputNumber.value){const e=function(e){const r={2200:"mir",2201:"mir",2202:"mir",2203:"mir",2204:"mir",31:"jcb",34:"americanexpress",35:"jcb",37:"americanexpress",4:"visa",51:"mastercard",52:"mastercard",53:"mastercard",54:"mastercard",55:"mastercard",62:"unionpay"};let t;for(const n in r)e.startsWith(n)&&(t=r[n]);return t}(this._inputNumber.value);this._iconWidget.selCardEnable(e)}}onInput(e){e.preventDefault(),this._iconWidget.setAllCardEnable(),this._timeout&&clearTimeout(this._timeout),this._timeout=setTimeout((()=>this.checkCard()),350)}}document.addEventListener("DOMContentLoaded",(()=>{new o(".valid-widget")}))},558:(e,r,t)=>{var n=t(618),o=Object.create(null),i="undefined"==typeof document,c=Array.prototype.forEach;function a(){}function d(e,r){if(!r){if(!e.href)return;r=e.href.split("?")[0]}if(l(r)&&!1!==e.isLoaded&&r&&r.indexOf(".css")>-1){e.visited=!0;var t=e.cloneNode();t.isLoaded=!1,t.addEventListener("load",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.addEventListener("error",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.href="".concat(r,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t)}}function s(){var e=document.querySelectorAll("link");c.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,r){if(i)return console.log("no window.document found, will not HMR CSS"),a;var t,u,f=function(e){var r=o[e];if(!r){if(document.currentScript)r=document.currentScript.src;else{var t=document.getElementsByTagName("script"),i=t[t.length-1];i&&(r=i.src)}o[e]=r}return function(e){if(!r)return null;var t=r.split(/([^\\/]+)\.js$/),o=t&&t[1];return o&&e?e.split(",").map((function(e){var t=new RegExp("".concat(o,"\\.js$"),"g");return n(r.replace(t,"".concat(e.replace(/{fileName}/g,o),".css")))})):[r.replace(".js",".css")]}}(e);return t=function(){var e=f(r.filename),t=function(e){if(!e)return!1;var r=document.querySelectorAll("link"),t=!1;return c.call(r,(function(r){if(r.href){var o=function(e,r){var t;return e=n(e),r.some((function(n){e.indexOf(r)>-1&&(t=n)})),t}(r.href,e);l(o)&&!0!==r.visited&&o&&(d(r,o),t=!0)}})),t}(e);if(r.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();t?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,u=0,function(){var e=this,r=arguments,n=function(){return t.apply(e,r)};clearTimeout(u),u=setTimeout(n,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var r=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",t=e.replace(new RegExp(r,"i"),"").split("/"),n=t[0].toLowerCase().replace(/\.$/,"");return t[0]="",r+n+t.reduce((function(e,r){switch(r){case"..":e.pop();break;case".":break;default:e.push(r)}return e}),[]).join("/")}},891:(e,r,t)=>{var n=t(558)(e.id,{esModule:!0,locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},d={};function s(e){var r=d[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var t=d[e]={id:e,exports:{}};try{var n={id:e,module:t,factory:a[e],require:s};s.i.forEach((function(e){e(n)})),t=n.module,n.factory.call(t.exports,t,t.exports,n.require)}catch(e){throw t.error=e,e}return t.exports}s.m=a,s.c=d,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>{},s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"77b68c185ba18b3c7836",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="ahj_hw4_credit_card_validator:",s.l=(t,n,o,i)=>{if(e[t])e[t].push(n);else{var c,a;if(void 0!==o)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==t||u.getAttribute("data-webpack")==r+o){c=u;break}}c||(a=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,s.nc&&c.setAttribute("nonce",s.nc),c.setAttribute("data-webpack",r+o),c.src=t),e[t]=[n];var f=(r,n)=>{c.onerror=c.onload=null,clearTimeout(p);var o=e[t];if(delete e[t],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(n))),r)return r(n)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=f.bind(null,c.onerror),c.onload=f.bind(null,c.onload),a&&document.head.appendChild(c)}},(()=>{var e,r,t,n={},o=s.c,i=[],c=[],a="idle",d=0,l=[];function u(e){a=e;for(var r=[],t=0;t<c.length;t++)r[t]=c[t].call(null,e);return Promise.all(r)}function f(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var r=0;r<e.length;r++)e[r]()}}))}function p(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return u("check").then(s.hmrM).then((function(t){return t?u("prepare").then((function(){var n=[];return r=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,o){return s.hmrC[o](t.c,t.r,t.m,e,r,n),e}),[])).then((function(){return r=function(){return e?m(e):u("ready").then((function(){return n}))},0===d?r():new Promise((function(e){l.push((function(){e(r())}))}));var r}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},v();var n=r.map((function(r){return r(e)}));r=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var i=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var c,a=u("apply"),d=function(e){c||(c=e)},s=[];return n.forEach((function(e){if(e.apply){var r=e.apply(d);if(r)for(var t=0;t<r.length;t++)s.push(r[t])}})),Promise.all([i,a]).then((function(){return c?u("fail").then((function(){throw c})):t?m(e).then((function(e){return s.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):u("idle").then((function(){return s}))}))}function v(){if(t)return r||(r=[]),Object.keys(s.hmrI).forEach((function(e){t.forEach((function(t){s.hmrI[e](t,r)}))})),t=void 0,!0}s.hmrD=n,s.i.push((function(l){var m,v,y,g,_=l.module,b=function(r,t){var n=o[t];if(!n)return r;var c=function(c){if(n.hot.active){if(o[c]){var a=o[c].parents;-1===a.indexOf(t)&&a.push(t)}else i=[t],e=c;-1===n.children.indexOf(c)&&n.children.push(c)}else console.warn("[HMR] unexpected require("+c+") from disposed module "+t),i=[];return r(c)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&"e"!==l&&Object.defineProperty(c,l,s(l));return c.e=function(e){return function(e){switch(a){case"ready":u("prepare");case"prepare":return d++,e.then(f,f),e;default:return e}}(r.e(e))},c}(l.require,l.id);_.hot=(m=l.id,v=_,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){i=v.parents.slice(),e=y?void 0:m,s(m)},active:!0,accept:function(e,r,t){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._acceptedDependencies[e[n]]=r||function(){},g._acceptedErrorHandlers[e[n]]=t;else g._acceptedDependencies[e]=r||function(){},g._acceptedErrorHandlers[e]=t},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._declinedDependencies[e[r]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=g._disposeHandlers.indexOf(e);r>=0&&g._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":r=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,r)})),u("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return a;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var r=c.indexOf(e);r>=0&&c.splice(r,1)},data:n[m]},e=void 0,g),_.parents=i,_.children=[],i=[],l.require=b})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var r=s.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),t=(e,r,t,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)t();else{var c=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||r,d=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=c,d.request=a,o.parentNode.removeChild(o),n(d)}},o.href=r,document.head.appendChild(o),o},n=(e,r)=>{for(var t=document.getElementsByTagName("link"),n=0;n<t.length;n++){var o=(c=t[n]).getAttribute("data-href")||c.getAttribute("href");if("stylesheet"===c.rel&&(o===e||o===r))return c}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var c;if((o=(c=i[n]).getAttribute("data-href"))===e||o===r)return c}},o=[],i=[],c=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var r=o[e];r.parentNode&&r.parentNode.removeChild(r)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),s.hmrC.miniCss=(e,r,a,d,l,u)=>{l.push(c),e.forEach((e=>{var r=s.miniCssF(e),c=s.p+r,a=n(r,c);a&&d.push(new Promise(((r,n)=>{var d=t(e,c,(()=>{d.as="style",d.rel="preload",r()}),n);o.push(a),i.push(d)})))}))},(()=>{var e,r,t,n,o,i=s.hmrS_jsonp=s.hmrS_jsonp||{179:0},c={};function a(r,t){return e=t,new Promise(((e,t)=>{c[r]=e;var n=s.p+s.hu(r),o=new Error;s.l(n,(e=>{if(c[r]){c[r]=void 0;var n=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+r+" failed.\n("+n+": "+i+")",o.name="ChunkLoadError",o.type=n,o.request=i,t(o)}}))}))}function d(e){function c(e){for(var r=[e],t={},n=r.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,c=o.chain,d=s.c[i];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],f=s.c[u];if(f){if(f.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([u]),moduleId:i,parentId:u};-1===r.indexOf(u)&&(f.hot._acceptedDependencies[i]?(t[u]||(t[u]=[]),a(t[u],[i])):(delete t[u],r.push(u),n.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function a(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}s.f&&delete s.f.jsonpHmr,r=void 0;var d={},l=[],u={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(s.o(t,p)){var h,m=t[p],v=!1,y=!1,g=!1,_="";switch((h=m?c(p):{type:"disposed",moduleId:p}).chain&&(_="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+_));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+_));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+_));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(p in u[p]=m,a(l,h.outdatedModules),h.outdatedDependencies)s.o(h.outdatedDependencies,p)&&(d[p]||(d[p]=[]),a(d[p],h.outdatedDependencies[p]));g&&(a(l,[h.moduleId]),u[p]=f)}t=void 0;for(var b,E=[],w=0;w<l.length;w++){var k=l[w],C=s.c[k];C&&(C.hot._selfAccepted||C.hot._main)&&u[k]!==f&&!C.hot._selfInvalidated&&E.push({module:k,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete i[e]})),n=void 0;for(var r,t=l.slice();t.length>0;){var o=t.pop(),c=s.c[o];if(c){var a={},u=c.hot._disposeHandlers;for(w=0;w<u.length;w++)u[w].call(null,a);for(s.hmrD[o]=a,c.hot.active=!1,delete s.c[o],delete d[o],w=0;w<c.children.length;w++){var f=s.c[c.children[w]];f&&(e=f.parents.indexOf(o))>=0&&f.parents.splice(e,1)}}}for(var p in d)if(s.o(d,p)&&(c=s.c[p]))for(b=d[p],w=0;w<b.length;w++)r=b[w],(e=c.children.indexOf(r))>=0&&c.children.splice(e,1)},apply:function(r){for(var t in u)s.o(u,t)&&(s.m[t]=u[t]);for(var n=0;n<o.length;n++)o[n](s);for(var i in d)if(s.o(d,i)){var c=s.c[i];if(c){b=d[i];for(var a=[],f=[],p=[],h=0;h<b.length;h++){var m=b[h],v=c.hot._acceptedDependencies[m],y=c.hot._acceptedErrorHandlers[m];if(v){if(-1!==a.indexOf(v))continue;a.push(v),f.push(y),p.push(m)}}for(var g=0;g<a.length;g++)try{a[g].call(null,b)}catch(t){if("function"==typeof f[g])try{f[g](t,{moduleId:i,dependencyId:p[g]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[g],error:n,originalError:t}),e.ignoreErrored||(r(n),r(t))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[g],error:t}),e.ignoreErrored||r(t)}}}for(var _=0;_<E.length;_++){var w=E[_],k=w.module;try{w.require(k)}catch(t){if("function"==typeof w.errorHandler)try{w.errorHandler(t,{moduleId:k,module:s.c[k]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:k,error:n,originalError:t}),e.ignoreErrored||(r(n),r(t))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:k,error:t}),e.ignoreErrored||r(t)}}return l}}}self.webpackHotUpdateahj_hw4_credit_card_validator=(r,n,i)=>{for(var a in n)s.o(n,a)&&(t[a]=n[a],e&&e.push(a));i&&o.push(i),c[r]&&(c[r](),c[r]=void 0)},s.hmrI.jsonp=function(e,r){t||(t={},o=[],n=[],r.push(d)),s.o(t,e)||(t[e]=s.m[e])},s.hmrC.jsonp=function(e,c,l,u,f,p){f.push(d),r={},n=c,t=l.reduce((function(e,r){return e[r]=!1,e}),{}),o=[],e.forEach((function(e){s.o(i,e)&&void 0!==i[e]?(u.push(a(e,p)),r[e]=!0):r[e]=!1})),s.f&&(s.f.jsonpHmr=function(e,t){r&&s.o(r,e)&&!r[e]&&(t.push(a(e)),r[e]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(783)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,